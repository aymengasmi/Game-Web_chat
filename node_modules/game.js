var Player = require('player');

function Game(id,title,maxPlayers) 
{ 
	this.id = id;
	this.title = title;
	this.maxPlayers = maxPlayers;
	this.players = [];
	this.hasStart=false;
	this.end=false;
	this.colorAvailable=["yellow","red","blue","green"];
	this.rules = new GameRule();
	this.gameLoop=null;
	this.width;
	this.height;


	if( typeof Game.initialized == "undefined" ) 
	{ 
		Game.prototype.resume = function()
		{
		        var resGame = 
			{
				id:this.id,
				title:this.title,
				maxPlayers:this.maxPlayers,
				players:this.players,
				colorAvailable:this.colorAvailable,
				hasStart:this.hasStart,
				end:this.end
		        };

			return resGame;
		};

		Game.prototype.canAddPlayer=function()
		{
			return (this.players.length < this.maxPlayers);
		};

		Game.prototype.setting=function(width,height)
		{
			this.width=width;
			this.height=height;
		};

		Game.prototype.addPlayer = function(name,color)
		{
			if(this.players.length < this.maxPlayers && this.isAvailableColor(color))
			{
				var id = this.players.length;
				this.players[id]=new Player(id);
				this.players[id].initialize(name,color,this.width,this.height);
				
				var index = this.colorAvailable.indexOf(color);
				if(index > -1){
					this.colorAvailable.splice(index,1)
				}

				return id;
			}

			return -1;
		};

		Game.prototype.renderGame = function(iogame,idroom)
		{
			iogame.in(idroom).emit('startBuild');
			var player;

			for(i=0;this.players.length>i;i++)
			{
				player=this.players[i];

				if(player.isAlive())
				{
					this.renderPlayer(iogame,idroom,player);

					if(player.form=="Rect")
					{
						iogame.in(idroom).emit('drawRect',{
											x:player.posX,
											y:player.posY,
											length:player.length,
											color:player.color
											});

					}
					else
					{
						iogame.in(idroom).emit('drawCircle',{
											x:player.posX,
											y:player.posY,
											length:player.length,
											color:player.color
											});
					}
				}
			}
		}

		Game.prototype.renderPlayer=function(iogame,idroom,player)
		{
			iogame.in(idroom).emit('refreshPlayerInfo',{
									id:player.id,
									life:player.life,
									speedX:player.speedX,
									speedY:player.speedY
									});
		}

		Game.prototype.terminate=function(iogame,ioroom,idroom,playersAlive)
		{
			if(playersAlive.length == 1)
			{
				iogame.in(idroom).emit('win',{winner:true,player:playersAlive[0]});
				iogame.in(idroom).emit('log',playersAlive[0].title+" win !");
				this.end=true;
				ioroom.emit('end',{id:this.id});
				clearInterval(this.gameLoop);

			}
			else if(playersAlive.length == 0)
			{
				iogame.in(idroom).emit('win',{winner:false});
				iogame.in(idroom).emit('log'," No winner =(");
				this.end=true;
				ioroom.emit('end',{id:this.id});
				clearInterval(this.gameLoop);
			}


		}

		Game.prototype.playLoop = function(iogame,ioroom,idroom)
		{
			var players;

			for(i=0;this.players.length>i;i++)
			{
				player=this.players[i];

				if(player.isAlive())
				{
					
					//Mise à jour des joueurs en vie.
					player.calculatePosition();
					player.calculateHitBox();
					this.rules.outDoor(player,this.width,this.height);
				}
			}

			//Verifie les hitbox
			for(i=0;this.players.length>i;i++)
			{
				playerOne=this.players[i];

				if(playerOne.isAlive())
				{
					for(j=i+1;this.players.length>j;j++)
					{
						playerTwo=this.players[j];

						if(playerTwo.isAlive())
						{
							this.rules.collapse(playerOne,playerTwo);
						}
					}

				}

			}			

			var playersAlive=this.dyingPlayers(iogame,idroom);
			this.renderGame(iogame,idroom);
			this.terminate(iogame,ioroom,idroom,playersAlive);
			
		};

		Game.prototype.dyingPlayers=function(iogame,idroom)
		{
			var playersAlive=[];

			for(i=0;this.players.length>i;i++)
			{
				player=this.players[i];
			
				if(player.isAlive())
				{
					//Mourrant
					if(player.life <= 0)
					{
						player.dead();
						this.renderPlayer(iogame,idroom,player);
						iogame.in(idroom).emit("log",player.title+" has lose the party.");
					}else
						playersAlive.push(player);
				}
			}

			return playersAlive;
		}

		Game.prototype.start= function(iogame,ioroom,room)
		{
			var game=this;
			if(this.gameLoop == null)
			{
				this.gameLoop=setInterval(function() 
				{
					game.playLoop(iogame,ioroom,room);
				}, 150);
			}

		};

		Game.prototype.isAvailableColor = function(color)
		{
			for(var i=0;i<this.colorAvailable.length;i++)
			{
				if(this.colorAvailable[i] == color)
					return true;
			}

			return false;
		}

		Game.initialized = true; 
	} 
}

function GameRule()
{
	if( typeof GameRule.initialized == "undefined" ) 
	{ 

		GameRule.prototype.outDoor = function(player,width,height)
		{
			if
			(	
				player.posX + player.length > width 	||
				player.posX - player.length < 0			||
				player.posY + player.length > height 	||
				player.posY - player.length < 0
			)
			{
				player.life=0;
			}
		}

		GameRule.prototype.collapse = function(playerOne,playerTwo)
		{
			if(playerOne.hitbox.collapse(playerTwo.hitbox))
			{
				
				//Vitesse en X
				var coeff = (playerTwo.speedX != 0)?playerOne.speedX/playerTwo.speedX:0;
				var sum = playerTwo.speedX+playerOne.speedX;

				// Meme sens				
				if(coeff >= 0)
				{
					//Si vitesse positive alors plus petit X qui est predateur
					if(sum > 0)
					{
						if(playerOne.posX > playerTwo.posX)
						{
							playerOne.speedX=playerOne.speedX+playerTwo.speedX;
							playerTwo.speedX=0;
							playerOne.life=playerOne.life-5;
						}
						else
						{	
							playerTwo.speedX=playerOne.speedX+playerTwo.speedX;
							playerOne.speedX=0;
							playerTwo.life=playerTwo.life-5;
						}
					}else if(sum < 0)
					{
						if(playerOne.posX < playerTwo.posX)
						{
							playerOne.speedX=playerOne.speedX+playerTwo.speedX;
							playerTwo.speedX=0;
							playerOne.life=playerOne.life-5;
						}
						else
						{	
							playerTwo.speedX=playerOne.speedX+playerTwo.speedX;
							playerOne.speedX=0;
							playerTwo.life=playerTwo.life-5;
						}
					}
				}
				else
				{
					var tmp=playerOne.speedX;
					playerOne.speedX=playerTwo.speedX;
					playerTwo.speedX=tmp;

					playerOne.life=playerOne.life-5;
					playerTwo.life=playerTwo.life-5;
				}

				//Vitesse en y
				coeff = (playerTwo.speedY != 0)?playerOne.speedY/playerTwo.speedY:0;
				sum = playerTwo.speedY+playerOne.speedY;

				// Meme sens				
				if(coeff >= 0)
				{
					//Si vitesse positive alors plus petit X qui est predateur
					if(sum > 0)
					{
						if(playerOne.posY > playerTwo.posY)
						{
							playerOne.speedY=playerOne.speedY+playerTwo.speedY;
							playerTwo.speedY=0;
							playerOne.life=playerOne.life-5;
						}
						else
						{	
							playerTwo.speedY=playerOne.speedY+playerTwo.speedY;
							playerOne.speedY=0;
							playerTwo.life=playerTwo.life-5;
						}
					}else if(sum < 0)
					{
						if(playerOne.posY < playerTwo.posY)
						{
							playerOne.speedY=playerOne.speedY+playerTwo.speedY;
							playerTwo.speedY=0;
							playerOne.life=playerOne.life-5;
						}
						else
						{	
							playerTwo.speedY=playerOne.speedY+playerTwo.speedY;
							playerOne.speedY=0;
							playerTwo.life=playerTwo.life-5;
						}
					}
				}
				else
				{
					var tmp=playerOne.speedX;
					playerOne.speedX=playerTwo.speedX;
					playerTwo.speedX=tmp;

					playerOne.life=playerOne.life-5;
					playerTwo.life=playerTwo.life-5;
				}				

				// Point actualisé
				playerOne.posX=playerOne.lastposX;
				playerOne.posY=playerOne.lastposY;

				playerTwo.posX=playerTwo.lastposX;
				playerTwo.posY=playerTwo.lastposY;

				
			}
		}

		GameRule.initialized = true; 
	}

}

module.exports = Game;
