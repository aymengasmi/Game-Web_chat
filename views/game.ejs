<!DOCTYPE html>

<html lang="fr">

<head>
	<meta charset="utf-8" />
	<title>mOG : Are you ready ? </title>
	
	<!-- Latest compiled and minified CSS -->
	<link rel="stylesheet" href="../css/bootstrap.min.css">

	<!-- Optional theme -->
	<link rel="stylesheet" href="../css/bootstrap-theme.min.css">

	<!-- Latest compiled and minified JavaScript -->
	<script src="../js/jquery-2.1.3.min.js"></script>
	<script src="../js/bootstrap.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	
	<!-- My stylesheet -->
	<link rel="stylesheet" href="../css/style.css" />
</head>

<body>



	<section class="container">
<div class="modal fade" id="winner" tabindex="-1" data-backdrop="false" data-show="true" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" >End of game</h4>
      </div>
      <div id="winnerbody"class="modal-body">
	

      </div>
      <div class="modal-footer">
        <a href="/room" class="btn btn-success">QUIT</a>
      </div>
	</form>
      </div>
    </div>
  </div>
</div>


<div class="modal fade" id="addplayer" tabindex="-1" data-backdrop="false" data-show="true" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Profil of our player</h4>
      </div>
      <div class="modal-body">
	<form id="inscr" class="form-horizontal" action="#">

	<div class="control-group">
		<label class="control-label" for="name">Name : </label>
		<input id="name" name="name" placeholder="" class="input-xlarge" type="text">
	</div>

	<div class="control-group">
	  <label class="control-label" for="maxplayers">Color : </label>
	
<% pgame= JSON.parse(game); %>	
	    <select id="color" name="maxplayers" class="input-xlarge">
<%
for(var j = 0 ; j < pgame.colorAvailable.length; j++) 
{
%>
	      <option id="c<%=j %>"><%=pgame.colorAvailable[j] %></option>
<%
}
%>

	    </select>

	</div>


	</fieldset>


      </div>
      <div class="modal-footer">
        <input type="submit" value="Save" class="btn btn-success" />
      </div>
	</form>
      </div>
    </div>
  </div>
</div>
		<div class="row">
			<div class=".col-xs-6 col-md-2"></div>

			<div class=".col-xs-6 col-md-8">
				<div class=" panel panel-default">

					<div class="panel-body">
						<header>
							<h1>ThreatCircle<% if(spectateur == true){ %> - Mode Spectateur <% } %></h1>
						</header>
						<article>
						<canvas id="gamecanvas<%=pgame.id%>" class="thumbnail" height="400" width="700" ></canvas>
						</article>
						<footer>
							<textarea id="log" disabled="disabled" class="form-control" ></textarea>
						</footer>
					</div>
				</div>
			</div>
			
			<div class=".col-xs-6 col-md-2">
				<nav class="thumbnail">
					<a id="back" href="/room" class="btn btn-info btn-lg btn-block" data-toggle="modal">QUIT</a>
					<a id="start" href="#" class="btn btn-success btn-lg btn-block" data-toggle="modal">START</a>
				</nav>
				<aside id="fluxplayer">
<%

for(var j = 0 ; j < pgame.players.length; j++) 
{
%>
					<div class="thumbnail">
						<h4 style="color:<%=pgame.players[j].color %>"><%=pgame.players[j].title %></h4>
						<ul class="list-unstyled">
							<li id="lifeplayer<%=pgame.players[j].id %>">Life : <%=pgame.players[j].life %>/100</li>
							<li id="speedXplayer<%=pgame.players[j].id %>">Speed X : <%=pgame.players[j].speedX %></li>
							<li id="speedYplayer<%=pgame.players[j].id %>">Speed Y : <%=pgame.players[j].speedY %></li>
						</ul>
					</div>
<% 
} 
%>
				</aside>
							  
			</div>
		</div>

	</section>
</body>

<script>	
	<% if(spectateur == false){ %>
	{
		$("#addplayer").modal({show:true});
		

	}
	<%}%>

	function addPlayer(idPlayer,color,name)
	{
		$('#fluxplayer').append('<div class="thumbnail"><h4 style="color:'+color+'">'+name+'</h4><ul class="list-unstyled"><li id="lifeplayer'+idPlayer+'">Life : 100/100</li><li id="speedXplayer'+idPlayer+'">Speed X : 0</li><li id="speedYplayer'+idPlayer+'">Speed Y : 0</li></ul></div>');
	}


	var socket = io.connect('/game');
	var spectateur=true;	

	var canvas = $("#gamecanvas<%=pgame.id%>");
	var context = document.getElementById("gamecanvas<%=pgame.id%>").getContext('2d');

	socket.emit('join',{id:'<%=id %>'});

	// Gestion temp réeel des elements de la page

	socket.on("colorUnAvailable",function(data)
	{
<%
for(var j = 0 ; j < pgame.colorAvailable.length; j++) 
{
%>
		if(data.color == "<%=pgame.colorAvailable[j] %>")$("#c<%=j %>").remove();
<%
}
%>
	});

	socket.on("canStart",function (data) {


		if(!spectateur)
		{
			$("#start").css("display","block");
		}
		else
		{
			$('#addplayer').modal('hide');
			$('h1').html("ThreatCircle - Mode Spectateur ");
	    		console.log("mode spectateur");
		}

	});


	socket.on("player",function (data) {

		$('h1').html("ThreatCircle - "+data.name);
		$('#addplayer').modal('hide');
		addPlayer(data.id,data.color,data.name);
		spectateur=false;
	});

	socket.on("jplayer",function (data) {
		addPlayer(data.id,data.color,data.name);
	});

	socket.on("start",function () {

		if(spectateur)
		{
			$('h1').html("ThreatCircle - Mode Spectateur ");
			$('#addplayer').modal('hide');
		}
		else
			$('nav').css("display","none");

	});

	socket.on("log",function (msg) {
		console.log(">>"+msg);
		$('#log').html(msg+'\n'+$('#log').html());
	});
		
	// Gestion des events
	$( "#start" ).click(function(event){
		socket.emit('start');

	});

	$( "#inscr" ).submit(function( event ) 
	{
		var color=$("#color option:selected").val();
		var name=$("#name").val();

		socket.emit('addplayer',{id:'<%=id %>',name:name,color:color,width:canvas.width(),height:canvas.height()});

		return false;
	});


	// Rafraichissement temps réel du jeu
	socket.on('win',function(data)
	{
		if(data.winner)
		{
			$('#winner').modal({show:true});
			$('#winnerbody').html('<p><span style="color:'+data.player.color+';">'+data.player.title+'</span> win the game !</p><p> Well done to him !</p>');
		}
		else
		{
			$('#winner').modal({show:true});
			$('#winnerbody').html("<p>Anybody win =(</p>");
		}
	});


	socket.on('startBuild',function()
	{
		context.clearRect(0, 0,canvas.width(),canvas.height());
	});

	socket.on('drawCircle',function(data)
	{
		context.beginPath();
		context.fillStyle=data.color;
		context.arc(data.x,data.y, data.length, 0, 2 * Math.PI);
		context.fill();
		context.stroke();
	});

	socket.on('drawRect',function(data)
	{
		context.beginPath();
		context.fillStyle=data.color;
		context.rect(data.x-data.length,data.y-data.length, 2*data.length, 2*data.length);
		context.fill();
		context.stroke();
	});


	socket.on('refreshPlayerInfo',function(data)
	{

		$("#lifeplayer"+data.id).html("Life : "+data.life+"/100");
		$("#speedXplayer"+data.id).html("Speed X : "+data.speedX);
		$("#speedYplayer"+data.id).html("Speed Y : "+data.speedY);	

	});







	// Gestion de la manette
	var linked; //on garde en mémoire qu'il existe un gamePad
	var hardware;
	var listener;

	if("getGamepads" in navigator)
	{
		$(window).on("gamepadconnected", function() { 
			//rattachement  de l'événement (cf plus bas) à une callback
		       	linked=true; //on garde en mémoire qu'il existe un gamePad
			
			hardware=navigator.getGamepads()[0];
			    listener = window.setInterval(function() 
			{
				if(hardware.axes[0] == 1)socket.emit('upVx');
				if(hardware.axes[0] == -1)socket.emit('downVx');
				if(hardware.axes[1] == 1)socket.emit('upVy');
				if(hardware.axes[1] == -1)socket.emit('downVy');
				if(hardware.buttons[3].pressed)
				{	
					socket.emit('becameSmaller');
					window.setTimeout(function(){socket.emit('restLength');}, 2500);
				}
				if(hardware.buttons[2].pressed)socket.emit('stop');
				if(hardware.buttons[5].pressed)socket.emit('becameCircl');
				if(hardware.buttons[4].pressed)socket.emit('becameRect');
	    		}, 100); 

			//On interroge régulièrement le gamePad pour connaître ses variations d'état
		});

		$(window).on("gamepaddisconnected", function() {
			linked=false;
  		  
		});
		 



		var checkGP = window.setInterval(function() {
			console.log('checkGP loading');
			
			if(navigator.getGamepads()[0]) 
			{

		    		if(!linked)
				{	
//		    		window.clearInterval(checkGP);

					$(window).trigger("gamepadconnected"); //déclenchement de l'événement

				}
		    		//window.clearInterval(checkGP);
			}


else {
console.log('no navigator');
				console.log('lisen key_code');

   	document.onkeydown = function(event) {
	   var key_code = event.keyCode;
				console.log(key_code);

      // add new HTML DOM
    	if(key_code == 39)socket.emit('upVx');
		if(key_code== 37)socket.emit('downVx');
		if(key_code == 40)socket.emit('upVy');
		if(key_code == 38)socket.emit('downVy');   
		if(key_code == 83){alert("stop");socket.emit('stop');}
		if(key_code == 67)socket.emit('becameCircl');
		if(key_code == 82)socket.emit('becameRect'); 

	    		}

}	

		});
	}



/*else {
console.log("no Manette")

	window.addEventListener("keydown", function (event) {
		  if (event.defaultPrevented) {
    			return; // Should do nothing if the key event was already consumed.
  			}

		  switch (event.key) {
	    	case "ArrowDown":

					socket.emit('downVx');
				
    	  break;
    		case "ArrowUp":
				socket.emit('downVy');   

    	  break;
    		case "ArrowLeft":
			socket.emit('upVy');
      			break;
    		case "ArrowRight":
			socket.emit('upVx');
     		 break;
   
    		default:
	      return; // Quit when this doesn't handle the key event.
  		}
  // Consume the event for suppressing "double action".
	  event.preventDefault();
	}, true);


}	


	*/

</script>

</html>

